var Q = require('Q'),
    edge = require('edge');
    /*express = require('express'),
    http = require('http'),
    app = express(),
    io = require('socket.io')(3000),
    ioClient = require('socket.io-client');*/

var merlinCLR = edge.func({ source: __dirname + '/lib/Merlin.cs', typeName: 'MerlinJSBinding.Merlin', methodName: 'Execute' });

var merlin = {}, matWindow = null;

merlin.SNAPSHOT = 'SNAPSHOT';

merlin.openMat = function(html) {
	var xW = 1024;
	var yW = 768;
	var xOffset = window.screen.width / 2 - xW / 2;
	var yOffset = window.screen.height;
	var x = (window.screenX || window.screenLeft || 0) + (xOffset || 0);
	var y = (window.screenY || window.screenTop || 0) + (yOffset || 0);
	var mat;
	if (!matWindow) {
		matWindow = global.window.nwDispatcher.requireNwGui().Window.open(
		  html, {
			  width: xW, 
			  height: yW, 
			  x:x, 
			  y:y-1,
			  fullscreen: true,
			  resizable: false,
			  toolbar: true
			  }
		);
					
		//matWindow.resizeTo(xW, yW);
		//matWindow.moveTo(x, y-1);
		//matWindow.setResizable(false);
		
	}
	return matWindow;
}

merlin.capture = function (uri) {
    var payload = {};
    //todo - check if uri is valid and handle it here
    if (uri) {        
        payload.commandName = "captureFromFile";
        payload.imageURI = uri;
    } else {
        payload.commandName = "capture";
    }

    return execute(payload);
}

merlin.getPicture = function (momentId, snapshot) {
    var payload = {};
	if (snapshot) {
		payload.commandName = "extractPreview";
	} else {
		payload.commandName = "extractPicture";
	}
    payload.momentId = momentId;

    return execute(payload);
}

merlin.extractPreview = function (momentId) {
    var payload = {};
    payload.commandName = "extractPreview";
    payload.momentId = momentId;

    return execute(payload);
}

merlin.getOutline = function (momentId) {
    var payload = {};
    payload.commandName = "extractOutline";
    payload.momentId = momentId;
    
    return execute(payload);
}

merlin.getText = function (momentId) {
    var payload = {};
    payload.commandName = "extractText";
    payload.momentId = momentId;
    
    return execute(payload);
}

merlin.showKeyboard = function () {
    var payload = {
        commandName: "showKeyboard",
        show: "true"
    };
    return execute(payload);
}

merlin.hideKeyboard = function () {
    var payload = {
        commandName: "showKeyboard",
        show: "false"
    };
    return execute(payload);
}

merlin.initializeObjectTracker = function () {
    var payload = {
        commandName: "initializeObjectTracker"
    };
    return execute(payload);
}

merlin.addTrainingImages = function (name, momentId) {
    var payload = {
        commandName: "addTrainingImages",
		name: name,
		momentId: momentId
    };
    return execute(payload);
}

merlin.startTracking = function (callback) {
    var payload = {
        commandName: "startTracking",
		callback: callback
    };
    return execute(payload);
}

merlin.stopTracking = function () {
    var payload = {
        commandName: "stopTracking"
    };
    return execute(payload);
}

merlin.createTrackingHandler = function (imageURIs, callback) {
    var imageArray = [];
    if (imageURIs instanceof Array) {
        imageArray = imageURIs;
    } else {
        imageArray.push(imageURIs);
    }
    var payload = {
        commandName: "createTrackingHandler",
        callback: callback,
        imageURIs: imageArray
    };    
    return execute(payload);
}

merlin.disposeTrackingHandler = function (callback) {   
    var payload = {
        commandName: "disposeTrackingHandler",
        callback: callback
    };
    return execute(payload);
}

function execute(payload) {
    var deferred = Q.defer();
    merlinCLR(payload, function (error, data) {
        if (error) {
            deferred.reject(error);
        }
        deferred.resolve(data);
    });
    return deferred.promise;
}

merlin.disposeMoment = function (momentId) {
    var payload = {};
    payload.commandName = "disposeMoment";
    payload.momentId = momentId;
    
    return execute(payload);
}

merlin.disposePcLink = function () {
    var payload = {};
    payload.commandName = "disposePcLink";
    
    return execute(payload);
}

/*
console.log('connecting');

io.on('connection', function (socket) {
    console.log('hi from ws');
    socket.emit('msg', 'this is a message from ws');
    socket.emit('msg', 'this is another message from ws');
    socket.on('clientMsg', function () {
        console.log('inception');
    })
});
io.emit('hi everyone');
*/

module.exports = merlin;